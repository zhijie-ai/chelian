# !/user/bin/python
# coding  : utf-8
# @Time   : 2024/11/13 17:13
# @User   : RANCHODZU
# @File   : 37.最佳买卖股票时机含冷冻期.py
# @e-mail : zushoujie@ghgame.cn
prices = [1,2,3,0,2]
def dp01():
    n = len(prices)
    if n == 0:
        return 0
    dp = [[0] * 4 for _ in range(n)]  # 创建动态规划数组，4个状态分别表示持有股票、不持有股票且处于冷冻期、不持有股票且不处于冷冻期、不持有股票且当天卖出后处于冷冻期
    dp[0][0] = -prices[0]  # 初始状态：第一天持有股票的最大利润为买入股票的价格
    for i in range(1, n):
        # 当前持有股票的最大利润等于前一天持有股票的最大利润或者前一天不持有股票且不处于冷冻期的最大利润减去当前股票的价格
        dp[i][0] = max(dp[i - 1][0], max(dp[i - 1][3], dp[i - 1][1]) - prices[i])
        dp[i][1] = max(dp[i - 1][1], dp[i - 1][3])  # 当前不持有股票且处于冷冻期的最大利润等于前一天持有股票的最大利润加上当前股票的价格
        dp[i][2] = dp[i - 1][0] + prices[i]  # 当前不持有股票且不处于冷冻期的最大利润等于前一天不持有股票的最大利润或者前一天处于冷冻期的最大利润
        dp[i][3] = dp[i - 1][2]  # 当前不持有股票且当天卖出后处于冷冻期的最大利润等于前一天不持有股票且不处于冷冻期的最大利润
    print(dp)
    print(max(dp[n - 1][3], dp[n - 1][1], dp[n - 1][2]))
    return max(dp[n - 1][3], dp[n - 1][1], dp[n - 1][2])  # 返回最后一天不持有股票的最大利润

"""
定义 f[i][j] 表示前 i 天 手中股票的状态
状态机：三个状态：1. 手中无股票 f[i][0]; 2. 手中有股票 f[i][1]; 3. 手中无股票在且在冷静期 f[i][2];
注意：我们规定卖出股票后的第一天转移到 冷静期 并不是无股票状态；
状态转移:
（1）手中无股票 ：可以通过冷静期 f[i - 1][2] 和 手中无股票转移过来 f[i - 1][0]; 可以得：f[i][0] = max(f[i - 1][0], f[i - 1][2]);
（2）手中有股票：可以通过无股票买股票转移过来 f[i - 1][0] - prices[i - 1] （prices i - 1 是偏移量）或者由上次持有股票转移 f[i - 1][1]; 可得：f[i][1] = max(f[i - 1][0] - prices[i - 1], f[i - 1][1])
（3）冷静期：只能由前一天卖出股票转移过来：f[i][2] = f[i - 1][1] + prices[i - 1];（prices i - 1 同样是偏移量）
"""
def dp02():
    dp = [[0] * 3 for _ in range(len(prices))]
    dp[0][0] = 0
    dp[0][1] = -prices[0]
    dp[0][2] = 0
    for i in range(1, len(prices)):
        dp[i][0] = max(dp[i-1][0], dp[i-1][2])
        dp[i][1] = max(dp[i-1][1], dp[i-1][0]-prices[i])
        dp[i][2] = dp[i-1][1] + prices[i]
    print(dp)
    print(max(dp[len(prices)-1][2], dp[len(prices)-1][0]))


def dp03():  # 参考的LeetCode上的解法
    """
    我们目前持有一支股票，对应的「累计最大收益」记为 f[i][0]；
    我们目前不持有任何股票，并且处于冷冻期中，对应的「累计最大收益」记为 f[i][1]；
    我们目前不持有任何股票，并且不处于冷冻期中，对应的「累计最大收益」记为 f[i][2]。
    对于 f[i][0]，我们目前持有的这一支股票可以是在第 i−1 天就已经持有的，对应的状态为 f[i−1][0]；或者是第 i 天买入的，那么第 i−1 天就不能持有股票并且不处于冷冻期中，对应的状态为 f[i−1][2] 加上买入股票的负收益 prices[i]。因此状态转移方程为：
    f[i][0]=max(f[i−1][0],f[i−1][2]−prices[i])
    对于 f[i][1]，我们在第 i 天结束之后处于冷冻期的原因是在当天卖出了股票，那么说明在第 i−1 天时我们必须持有一支股票，对应的状态为 f[i−1][0] 加上卖出股票的正收益 prices[i]。因此状态转移方程为：
    f[i][1]=f[i−1][0]+prices[i]
    对于 f[i][2]，我们在第 i 天结束之后不持有任何股票并且不处于冷冻期，说明当天没有进行任何操作，即第 i−1 天时不持有任何股票：如果处于冷冻期，对应的状态为 f[i−1][1]；如果不处于冷冻期，对应的状态为 f[i−1][2]。因此状态转移方程为：
    f[i][2]=max(f[i−1][1],f[i−1][2])
    max(f[n−1][0],f[n−1][1],f[n−1][2])
    """
    n = len(prices)
    if n == 0:
        return 0

    dp = [[0] * 3 for _ in range(n)]
    dp[0][0] = -prices[0]
    dp[0][1] = 0
    dp[0][2] = 0
    for i in range(1, n):
        dp[i][0] = max(dp[i-1][0], dp[i-1][2]-prices[i])
        dp[i][1] = dp[i-1][0] + prices[i]
        dp[i][2] = max(dp[i-1][1], dp[i-1][2])

    print(dp)
    print(max(dp[n-1][1], dp[n-1][2]))


if __name__ == '__main__':
    dp01()
    dp02()
    dp03()
